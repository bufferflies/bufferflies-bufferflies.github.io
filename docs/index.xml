<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog for bufferflies</title>
    <link>https://bufferflies.github.io/</link>
    <description>Recent content on blog for bufferflies</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>bufferflies</copyright>
    <lastBuildDate>Sat, 20 Feb 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://bufferflies.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>简介</title>
      <link>https://bufferflies.github.io/about/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/about/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>zsh</title>
      <link>https://bufferflies.github.io/post/zsh-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/zsh-%E5%AE%89%E8%A3%85/</guid>
      
        <description>&lt;h2 id=&#34;安装oh-my-zsh&#34;&gt;安装oh-my-zsh&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sh -c &amp;quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装插件&#34;&gt;安装插件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进入oh-my-zsh插件库中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~/.oh-my-zsh/custom/plugins/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载插件（自动补全为例）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git://github.com/zsh-users/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其实插件名就是仓库名（zsh-autosuggestions）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插件生效
vim ~/.zshrc
找到plugin配置，添加如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plugins=(
    git
    zsh-autosuggestions
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生效.zshrc 文件
source ~/.zsh&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;安装fzf&#34;&gt;安装fzf&lt;/h2&gt;
&lt;p&gt;支持历史命令查看
&lt;a href=&#34;https://www.jianshu.com/p/74ff1e637b2c&#34;&gt;https://www.jianshu.com/p/74ff1e637b2c&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/b6af829ec2dc&#34;&gt;安装oh-my-zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/xfxf0520/article/details/84589446&#34;&gt;插件安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learnku.com/tensorflow/t/5790/ultimate-terminal-zshautojump&#34;&gt;autojumo&lt;/a&gt; 记录cd去过的路径 后面可以直接通过 j 文件夹进行跳转&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5d905a886fb9a04e3902d7a9&#34;&gt;fzf&lt;/a&gt; 记录历史命令，非常直观显示最近使用的命令&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>网络基础</title>
      <link>https://bufferflies.github.io/post/%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/%E7%BD%91%E7%BB%9C/</guid>
      
        <description>&lt;h1 id=&#34;网络基础协议&#34;&gt;网络基础协议&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://bufferflies.github.io/pachong.png&#34; alt=&#34;test&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>webflux源码设计1</title>
      <link>https://bufferflies.github.io/post/webflux%E8%A7%A3%E6%9E%901/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/webflux%E8%A7%A3%E6%9E%901/</guid>
      
        <description>&lt;h1 id=&#34;spring5-webflux-源码解析一&#34;&gt;Spring5 WebFlux 源码解析（一）&lt;/h1&gt;
&lt;h2 id=&#34;场景&#34;&gt;场景：&lt;/h2&gt;
&lt;p&gt;能够将&lt;strong&gt;请求&lt;/strong&gt;适配到&lt;strong&gt;指定方法&lt;/strong&gt;，&lt;strong&gt;调用&lt;/strong&gt;方法并&lt;strong&gt;返回&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;领域图&#34;&gt;领域图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;storage Request as W
storage HandlerMapping as M
storage HandlerAdapter as A
storage HandlerResultHandler as R
entity Result as E
control Handler as C

W -&amp;gt; M: trigger
M -&amp;gt; C: find 
E -&amp;gt; R: consume 
C -&amp;gt; A: adapt
A -&amp;gt; E: transfer

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对象解释
Request: 代表用户的请求
HandlerMapping： 处理器寻找器 根据请求参数，寻找到处理器
HandlerAdapter： 处理器适配器（入参和出参适配）
HandlerResultHandler：结果处理器
Result： 处理器处理后的结果
Handler： 处理器（需要用户编写）&lt;/p&gt;
&lt;h2 id=&#34;类图&#34;&gt;类图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;interface HandlerMapping{
    getHandler(ServerWebExchange ex):Object
}
interface HandlerAdapter{
    supports(Object object):boolean
    handler(ServerWebExchange ex, object):HandlerResult
}
interface HandlerResultHandler{
    supports(HandlerResult result): boolean 
    handle(ServerWebExchange ex, HandlerResult result): void
}
class HandlerResult{
    Object handler
    Object returnType
    Object returnValue
    Object returnBingContext
    Function&amp;lt;Throwable, HandleResult&amp;gt; exceptionException
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;时序图&#34;&gt;时序图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;actor User as U
boundary DispatcherHandler as D
control HandlerMapping as M
control HandlerAdapter as A
control HandlerResultHandler as R

U -&amp;gt; D: send Request
D -&amp;gt; M: find a handler that can resolve the request
M --&amp;gt; D: return Handler
D -&amp;gt; A: process the handler
A --&amp;gt; D: return HandlerResult
D -&amp;gt; R: process result 
R --&amp;gt; D: return response 
D --&amp;gt; U: render  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;核心链式调用&#34;&gt;核心链式调用：&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;(*) --&amp;gt; [request] &amp;quot;HandlerMapping&amp;quot;
--&amp;gt;[Handler] &amp;quot;HandlerAdapter&amp;quot;
--&amp;gt;[Adapt] &amp;quot;HandlerResult&amp;quot;
--&amp;gt;[Response] &amp;quot;Socket&amp;quot;
--&amp;gt;(*)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;附录&#34;&gt;附录&lt;/h3&gt;
&lt;h4 id=&#34;附录一&#34;&gt;附录一&lt;/h4&gt;
&lt;p&gt;spring 最核心代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;	public Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;Void&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; handle(ServerWebExchange exchange) {
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (this.handlerMappings &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; null) {
			&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; createNotFoundError();
		}
		&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 找到所有注册的Mappings
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; Flux.fromIterable(this.handlerMappings)
				&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 按序寻找可以处理该请求的Mapping
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;				.concatMap(mapping &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; mapping.getHandler(exchange))
				&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 只返回一个
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;				.next()
				&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//无法进行处理 抛出404异常
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;				.switchIfEmpty(createNotFoundError())
				&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 寻找最适合的适配器并执行Handler 返回结果
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;				.flatMap(handler &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; invokeHandler(exchange, handler))
				&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 寻找结果处理器， 写回到Response中
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;				.flatMap(result &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; handleResult(exchange, result));
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;核心类单元测试构造&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;映射处理器&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// mock 一个HandlerMapping 接口 并使其继承Ordered 接口
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;HandlerMapping hm1 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; mock&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HandlerMapping&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; withSettings&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;extraInterfaces&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;Ordered&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 实现Ordered接口
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;given&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(((&lt;/span&gt;Ordered&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; hm1&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getOrder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;willReturn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 给定任何参数返回“1”
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;given&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;hm1&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;any&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;willReturn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;Supplier&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;适配器&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;SupplierHandlerAdapter&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;implements&lt;/span&gt; HandlerAdapter &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;

   &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 支持所有的Supplier类型的处理器
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;       &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;supports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;Object handler&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; handler &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; Supplier&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 执行处理器 将其结果转换为HandlerResult
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;       &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;HandlerResult&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;ServerWebExchange exchange&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Object handler&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; HandlerResult&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;handler&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;Supplier&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; handler&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt; RETURN_TYPE&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;结果处理器&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;StringHandlerResultHandler&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;implements&lt;/span&gt; HandlerResultHandler &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;

       &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;supports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HandlerResult result&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
           Object value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getReturnValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;());&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

       &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;Void&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;handleResult&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;ServerWebExchange exchange&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; HandlerResult result&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 获取response中的值
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; bytes &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; result&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getReturnValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;StandardCharsets&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
           &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 将其转换为DataBuffer类型
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;           DataBuffer dataBuffer &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; DefaultDataBufferFactory&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;wrap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;bytes&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
           &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 填充到response中
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; exchange&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getResponse&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;writeWith&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;dataBuffer&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>webflux源码设计2</title>
      <link>https://bufferflies.github.io/post/webflux%E8%A7%A3%E6%9E%902/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/webflux%E8%A7%A3%E6%9E%902/</guid>
      
        <description>&lt;h2 id=&#34;核心类图&#34;&gt;核心类图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;class RouterFunction {
  RouteFunction routeFunction; 路由执行器
  List&amp;lt;HttpMessageReader&amp;lt;?&amp;gt;&amp;gt; messageReaders; request阅读器
  getHandlerInternal(ServerWebExchange ex): HandlerFunction 获取对应的执行器
}

class HandlerFunctionAdapter {
  supports(Object handler): boolean 只支持HandlerFunction 的函数
  handler(ServerWebExchange ex,Object handler): HandlerResult 执行方法并进行的转换
}

class ServerResponseResultHandler {
    List&amp;lt;HttpMessageWriter&amp;lt;?&amp;gt;&amp;gt; messageWriters: response 编写器
    List&amp;lt;ViewResolver&amp;gt; viewResolvers： 视图映射
    supports(HandlerResult result)：boolean 只处理返回类型为ServerResponse类型
    handleResult(ServerWebExchange exchange,HandlerResult result): void 将结果写入到response中
    
}

interface HandlerFunction{
   handle(ServerRequest request): T 最直接的操作 业户逻辑入口 一般lambda实现
}

interface RequestPredicate{
    test(ServerRequest request): boolean
}

interface RouteFunction {
  route(ServerRequest request): HandlerFunction 该路由是否能够满足该请求 核心
  and(RouteFunction other):  SameComposedRouterFunction 合并
  andOther(RouteFunction other): DifferentComposedRouterFunction 合并
  andRoute(RequestPredicate predicate, HandlerFunction&amp;lt;T&amp;gt; handlerFunction): RouterFunction 比较底层
  andNest(RequestPredicate predicate, RouterFunction&amp;lt;T&amp;gt;  routerFunction): RouterFunction 合并路由
  filter(HandlerFilterFunction&amp;lt;T, S&amp;gt; filterFunction): 带有过滤的路由
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解释：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RouteFunction 会将所有的RouteFunction进行聚合&lt;/li&gt;
&lt;li&gt;过滤其实是在mapping的时候执行的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;初始化过滤：&lt;/p&gt;
&lt;h2 id=&#34;时序图&#34;&gt;时序图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;actor Processor as U
control RouteFunction as R
control Predicate as P 
control HandlerFunctionAdapter as A
control ServerResponseResultHandler as R

U -&amp;gt; R : getHandler
R -&amp;gt; P : test the request
P --&amp;gt;R : OK
R --&amp;gt;U : return HandlerFunction
U -&amp;gt; A : execute the handler
A --&amp;gt;U : return and wrap to HandlerResult
U -&amp;gt; R: test
R -&amp;gt;U : write value to response  
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
  </channel>
</rss>
