<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog for bufferflies</title>
    <link>https://bufferflies.github.io/</link>
    <description>Recent content on blog for bufferflies</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>bufferflies</copyright>
    <lastBuildDate>Fri, 26 Feb 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://bufferflies.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>简介</title>
      <link>https://bufferflies.github.io/about/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/about/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>API 网关设计</title>
      <link>https://bufferflies.github.io/post/api-%E7%BD%91%E5%85%B3%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/api-%E7%BD%91%E5%85%B3%E8%AE%BE%E8%AE%A1/</guid>
      
        <description>&lt;h1 id=&#34;网关评审&#34;&gt;网关评审&lt;/h1&gt;
&lt;h2 id=&#34;需求&#34;&gt;需求&lt;/h2&gt;
&lt;p&gt;需要的能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由&lt;/li&gt;
&lt;li&gt;协议转换&lt;/li&gt;
&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;mertices监控&lt;/li&gt;
&lt;li&gt;路由动态更新&lt;/li&gt;
&lt;li&gt;支持OAuth2，LDAP身份认证&lt;/li&gt;
&lt;li&gt;熔断&lt;/li&gt;
&lt;li&gt;重试&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;场景一&#34;&gt;场景一&lt;/h3&gt;
&lt;p&gt;请求直接到后端服务&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;node request

node services1
node services2

request--&amp;gt;services1
request--&amp;gt;services2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;场景二&#34;&gt;场景二&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;node request

node gateway
node consul

node services1
node services2

request--&amp;gt;gateway: send request
gateway-&amp;gt;consul: send server name 
consul--&amp;gt; gateway: return ip table

gateway--&amp;gt;services1
gateway--&amp;gt;services2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网关主要的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对请求进行鉴权 这一块业务性质比较重&lt;/li&gt;
&lt;li&gt;统计请求耗时，加监控，业务性质比较重&lt;/li&gt;
&lt;li&gt;匹配请求，选择最合适的路由进行转发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此主要的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够自定义全局过滤器，适用到所有请求 ，如监控&lt;/li&gt;
&lt;li&gt;能够自定义断言器，根据请求来决定其访问的服务&lt;/li&gt;
&lt;li&gt;能够自定义过滤器，配合断言器，适用于指定的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;janus设计&#34;&gt;Janus设计&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;storage predicate {
    storage PredicateFactory
    storage PathPredicateFactory
    PredicateFactory&amp;lt;--PathPredicateFactory
}
storage route {
     storage id
     storage uri 
     storage Predicate
     storage FilterChain
     storage Filter
     id--&amp;gt;uri
     id--&amp;gt;Predicate
     id--&amp;gt;FilterChain
     FilterChain--&amp;gt;Filter: filter
}
storage WebHandler{
    card Routes
}
storage filter {
    storage FilterFactory
    storage RemoveFilterFactory 
    FilterFactory&amp;lt;--RemoveFilterFactory
}
control request
Filter&amp;lt;--FilterFactory:factory
Predicate&amp;lt;--PredicateFactory: factory
request -&amp;gt;WebHandler
WebHandler-&amp;gt;route
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;后期的想法&#34;&gt;后期的想法&lt;/h2&gt;
&lt;h3 id=&#34;依靠trpc所有服务暴露多种协议&#34;&gt;依靠trpc，所有服务暴露多种协议&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;node request

node gateway
node consul

storage {
   card container1
   node services1
   container1-&amp;gt;services1
}
storage {
   card container2
   node services2
   container2-&amp;gt;services2
}
node services2

request--&amp;gt;gateway: send request
gateway-&amp;gt;consul: send server name 
consul-&amp;gt; gateway: return ip table

gateway--&amp;gt;container1
gateway--&amp;gt;container2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;container 作为容器 提供各种协议
service 专注于业务 容器会将socket转换到相应的入参&lt;/p&gt;
&lt;h3 id=&#34;在网关上进行配置-指定协议&#34;&gt;在网关上进行配置 指定协议&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;node http_request

node gateway
node consul

node http_proxy
node grpc_proxy

node services1
node services2

http_request--&amp;gt;gateway: send request
gateway-&amp;gt;consul: send server name 
consul-&amp;gt; gateway: return ip table

gateway--&amp;gt;http_proxy: proxy
gateway--&amp;gt;grpc_proxy: proxy

http_proxy--&amp;gt;services1: handle
grpc_proxy--&amp;gt;services2: handle

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;grpc_proxy 提供Http转rpc功能
http——proxy 提供http代理&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>API 网关设计 OAuth2</title>
      <link>https://bufferflies.github.io/post/api-%E7%BD%91%E5%85%B3-%E6%94%AF%E6%8C%81%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/api-%E7%BD%91%E5%85%B3-%E6%94%AF%E6%8C%81%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86/</guid>
      
        <description>&lt;h1 id=&#34;领域模型&#34;&gt;领域模型&lt;/h1&gt;
&lt;p&gt;核心功能：为网关提供用户认证服务
提供的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够接入支持OAuth2的认证服务&lt;/li&gt;
&lt;li&gt;用户登陆成功后可以跳转到之前访问的页面&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;领域图&#34;&gt;领域图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;
storage request
storage proxy 
storage token
storage identification

rectangle verify{
    storage Verify 
}
rectangle signature{
    storage Signature 
}
rectangle Jwt{ 
}
rectangle auth{
    storage Auth 
    storage OAuth2
    OAuth2-&amp;gt;Auth 
}

request &amp;lt;-&amp;gt;proxy: proxy
request ..&amp;gt; token:carry
token --&amp;gt; Verify: use
identification &amp;lt;-- Verify: verify

identification &amp;lt;--Auth : consult 


identification --&amp;gt;Signature: use
token &amp;lt;--Signature: sign
Verify&amp;lt;--Jwt
Signature&amp;lt;--Jwt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Signature: 负责加签，
Verify: 负责解签，可以获取加签之前的内容
Auth：获取用户信息&lt;/p&gt;
&lt;p&gt;identify： 用户信息
token： 加签过后的凭证&lt;/p&gt;
&lt;h2 id=&#34;类图&#34;&gt;类图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;
interface Signature{
    sign(Object signature): String
}
interface Verify{
    verify(String token): Object
}

interface Auth{
    consult(String code):Object
}

interface State{
    encode(URL url): String code
    decode(String code): URL url 
}

class SimpleState{
    - Duration expired
    - Integer size 
    encode(URL url): String code
    decode(String code): URL url
}

class JwtSignature {
     - SignatureAlgorithm alg
     - Duration expired
     - String issue
     - String subject
     sign(Object signature): String
     verify(String token): Object
}

class OAuth2{
    - String urlTemplate
    - RestTemplate client
    consult(String code):Object
}

Signature &amp;lt;-- JwtSignature
Verify &amp;lt;-- JwtSignature
State &amp;lt;-- SimpleState
Auth&amp;lt;--OAuth2
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;时序图&#34;&gt;时序图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;
actor User as U
control Gateway as G
control AuthFilter as A
control UserAction as AC
control Proxy as P
control service as S 
control OAuth2 as O

== request with legal token ==
U -&amp;gt; G: send xxx.weling.com/auth/xxx
G -&amp;gt; A: validate token
A --&amp;gt; G: token is legal
G -&amp;gt; P: send auth.weling.com/xxx 
P -&amp;gt; S: handler
S --&amp;gt; P: return result
P --&amp;gt; G: post handler
G --&amp;gt; U: render 
== request with nothing ==

U -&amp;gt; G : request xxx.weling.com/auth/xxx
G -&amp;gt; A : verify token
A -&amp;gt; G : token is illegal
G -&amp;gt; O : 302 open.weixin.qq.com? \n appid=xxx\n&amp;amp;redirect_url=xxx.weling.com/consult/ xxx \n&amp;amp;scope=xxx\n&amp;amp;state=xxx.weling.com/auth/xxx
O -&amp;gt;O : wait user login 
O --&amp;gt;G : 302  xxx.weling.com/consult&amp;amp;code=xxx&amp;amp;\nstate=xxx.weling.com/auth/xxx
G -&amp;gt; O : consult identification \nopen.weixin.qq.com\n&amp;amp;appid=xxx\n&amp;amp;code=xxx\n&amp;amp;secret=xxx
O --&amp;gt;G : return identify 
G --&amp;gt;U : return redirect html \n and set cookie
U -&amp;gt;U : set cookie and redirect
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>API 网关设计 插件编写</title>
      <link>https://bufferflies.github.io/post/api-%E7%BD%91%E5%85%B3%E8%AE%BE%E8%AE%A1-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/api-%E7%BD%91%E5%85%B3%E8%AE%BE%E8%AE%A1-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/</guid>
      
        <description>&lt;h1 id=&#34;trpchttp-gateway&#34;&gt;trpc/http-gateway&lt;/h1&gt;
&lt;p&gt;需求：对外提供HTTP的转发功能
特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持自定义的Filter和Predicate&lt;/li&gt;
&lt;li&gt;兼容spring cloud gateway的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网关设计&#34;&gt;网关设计&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;storage predicate {
    storage PredicateFactory
    storage PathPredicateFactory
    PredicateFactory&amp;lt;--PathPredicateFactory
}
storage route {
     storage id
     storage uri 
     storage Predicate
     storage FilterChain
     storage Filter
     id--&amp;gt;uri
     id--&amp;gt;Predicate
     id--&amp;gt;FilterChain
     FilterChain--&amp;gt;Filter: filter
}
storage WebHandler{
    card Routes
}
storage filter {
    storage FilterFactory
    storage RemoveFilterFactory 
    FilterFactory&amp;lt;--RemoveFilterFactory
}
control request
Filter&amp;lt;--FilterFactory:factory
Predicate&amp;lt;--PredicateFactory: factory
request -&amp;gt;WebHandler
WebHandler-&amp;gt;route
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求送达到WebHandler中，WebHandler寻找能够处理该请求的Route&lt;/li&gt;
&lt;li&gt;WebHandler找到这个Route，执行过滤器链&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;名词解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Route： 一个代理的抽象 包含断言和过滤器&lt;/li&gt;
&lt;li&gt;FilterChain： 过滤器执行器&lt;/li&gt;
&lt;li&gt;Filter： 过滤器，处理http请求&lt;/li&gt;
&lt;li&gt;Predicate： 断言器，给定一个请求，判断其是否可以处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Webhandler : 请求处理器，负责这个请求的执行&lt;/li&gt;
&lt;li&gt;FilterFactory： 为过滤器的工厂&lt;/li&gt;
&lt;li&gt;PredicateFactory：为断言器的工程&lt;/li&gt;
&lt;li&gt;route：一个代理的设置
&lt;ul&gt;
&lt;li&gt;id： 一个代理的唯一ID&lt;/li&gt;
&lt;li&gt;uri： 最终的uri&lt;/li&gt;
&lt;li&gt;predicate：使用的Http断言器&lt;/li&gt;
&lt;li&gt;filters：设置的过滤器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;类图&#34;&gt;类图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;interface Filter{
    PreHandler(request, response)bool
    PostHandler(request, response)
}

class RequestFilter{
    PreHandler(request, response)bool
    PostHandler(request, response)
    int order
}

class GlobalFilter{
    PreHandler(request, response)bool
    PostHandler(request, response)
    int order
}

class FilterChain{
    FilterChain(Filter filters[])
    Filter(request, response)
}

class RequestFilterFactory&amp;lt;T&amp;gt;{
    New(string config)RequestFilter
}
interface RequestPredicate{
    Test(request)bool
}
class Route{
    string id
    string url
    RequestPredicate predicate
    RequestFilter []filters
    
}
class WebHandler{
    Route route[]
    WebHandler(string path)
    ServerHttp(request, response)
    Lookup(request)Route   
}


class RequestPredicateFactory&amp;lt;T&amp;gt;{
    New(T t)RequestPredicate
}
Filter &amp;lt;.. RequestFilter 
Filter&amp;lt;..GlobalFilter
RequestPredicate &amp;lt;-- RequestPredicateFactory
WebHandler&amp;lt;--*Route
Filter&amp;lt;-- RequestFilterFactory
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;约定：
方法大写为public方法
属性名大写为Public变量&lt;/p&gt;
&lt;h2 id=&#34;时序图&#34;&gt;时序图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;actor Request as R
control WebHandler as W
control Route as T
control Predicate as P
control FilterChain as C
control Filter as F

R -&amp;gt; W: request xxx.weling.com/test
W -&amp;gt; T: consult
T -&amp;gt; P: do test method 
P --&amp;gt;T: return boolean 
T -&amp;gt; C: do filter 
C -&amp;gt; F: do PreHandler and PostHandler
F --&amp;gt;C: return response
C --&amp;gt;T: complete
T --&amp;gt;W: write response to socket
W --&amp;gt; R: render
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;使用说明&#34;&gt;使用说明&lt;/h2&gt;
&lt;p&gt;##程序启动
使用步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置trpc——go.yml 文件&lt;/li&gt;
&lt;li&gt;配置路由配置&lt;/li&gt;
&lt;li&gt;启动&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;启动类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;gateway/handler&amp;#34;&lt;/span&gt;
	web &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;git.code.oa.com/mossli/trpcweb&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;git.code.oa.com/trpc-go/trpc-go&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;git.code.oa.com/trpc-go/trpc-go/filter&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;git.code.oa.com/trpc-go/trpc-go/log&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;git.code.oa.com/trpc-go/trpc-go/plugin&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;git.code.oa.com/trpc-go/trpc-go/server&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
)
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;main&lt;/span&gt;(){

	&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// load log config
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;	plugin.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Register&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;custom&amp;#34;&lt;/span&gt;, log.DefaultLogFactory)
	&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// load trpc config 
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;	opts &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; []server.Option{
		server.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;WithFilter&lt;/span&gt;(filter.NoopFilter),
	}
	server &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; trpc.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;NewServer&lt;/span&gt;(opts&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;...&lt;/span&gt;)
	s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; web.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Server&lt;/span&gt;(server)
	&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// for gateway
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;	svi &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; web.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Service&lt;/span&gt;(s.Server, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;web.mossli.gateway.TestSrv2&amp;#34;&lt;/span&gt;)
	h&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt;handler.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;New&lt;/span&gt;()
	svi.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,h)
	&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// start stub for test
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;	svi2 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; web.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Service&lt;/span&gt;(s.Server, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;web.mossli.gateway.TestSrv3&amp;#34;&lt;/span&gt;)
	svi2.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;http.Request){
		w.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;WriteHeader&lt;/span&gt;(&lt;span style=&#34;color:#099&#34;&gt;200&lt;/span&gt;)
		fmt.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Fprintf&lt;/span&gt;(w, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;echo&amp;#34;&lt;/span&gt;)
	})
	s.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Serve&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;路由配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[{
  &lt;span style=&#34;color:#000080&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;auth&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#000080&#34;&gt;&amp;#34;uri&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;lb://localhost:8021&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#000080&#34;&gt;&amp;#34;predicates&amp;#34;&lt;/span&gt;: [
    {
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//为自定义断言器工厂的name&lt;/span&gt;
      &lt;span style=&#34;color:#000080&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Path&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#000080&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;/test/*&amp;#34;&lt;/span&gt;
    }
  ],
  &lt;span style=&#34;color:#000080&#34;&gt;&amp;#34;filters&amp;#34;&lt;/span&gt;: [
    {
    &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;//为自定义过滤器工厂的name&lt;/span&gt;
      &lt;span style=&#34;color:#000080&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;RemoveHeader&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#000080&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Auth&amp;#34;&lt;/span&gt;
    }
  ]
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自定义断言器predicate&#34;&gt;自定义断言器（Predicate）&lt;/h3&gt;
&lt;p&gt;断言器是&lt;strong&gt;多例的&lt;/strong&gt;，但是其工厂是&lt;strong&gt;单例的&lt;/strong&gt;
约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;断言器命名以Predicate结尾&lt;/li&gt;
&lt;li&gt;断言器工厂命名以PredicateFactory结尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自定义断言器 实现RequestPredicate接口&lt;/li&gt;
&lt;li&gt;自定义断言器工厂 实现RequestPredicateFactory&lt;/li&gt;
&lt;li&gt;推荐自定义一个Config结构体&lt;/li&gt;
&lt;li&gt;注册断言器工厂&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;package&lt;/span&gt; predicate

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;init&lt;/span&gt;(){
	&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;RegisterFactory&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;MethodPredicateFactory{})
}
&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;请求方法Method断言器
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;type&lt;/span&gt; MethodPredicateFactory &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;type&lt;/span&gt; MethodRequestPredicate &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{
	config MethodConfig
}

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;type&lt;/span&gt; MethodConfig &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	methods []&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;string&lt;/span&gt;
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;MethodRequestPredicate)&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Test&lt;/span&gt;(r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;http.Request)&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;bool&lt;/span&gt;{
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; _,method&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;range&lt;/span&gt; p.config.methods{
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; method&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt;r.Method{
			&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;false&lt;/span&gt;
}
&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// methods 以逗号进行分割
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;MethodPredicateFactory)&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;New&lt;/span&gt;(methods &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;string&lt;/span&gt;)RequestPredicate{
	m&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt;strings.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Split&lt;/span&gt;(methods,&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// http 中method均是大写
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; i,method&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;range&lt;/span&gt; m{
		m[i]=strings.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ToUpper&lt;/span&gt;(method)
	}
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;MethodRequestPredicate{MethodConfig{m}}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自定义过滤器工厂&#34;&gt;自定义过滤器工厂&lt;/h3&gt;
&lt;p&gt;过滤器是&lt;strong&gt;多例的&lt;/strong&gt;，但是其工厂是&lt;strong&gt;单例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;约定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过滤器命名以Filter结尾&lt;/li&gt;
&lt;li&gt;过滤器工厂命名以FilterFactory结尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自定义过滤器 实现Filter接口&lt;/li&gt;
&lt;li&gt;自定义过滤器工厂 实现FilterFactory&lt;/li&gt;
&lt;li&gt;推荐自定义一个Config结构体&lt;/li&gt;
&lt;li&gt;注册过滤器工厂&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;package&lt;/span&gt; filter

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;gateway/utils&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;init&lt;/span&gt;(){
	&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Register&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;RemoveHeader&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;RemoveHeaderFilterFactory{})
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;type&lt;/span&gt; RemoveHeaderFilterFactory &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{
}

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;type&lt;/span&gt; RemoveHeaderFilter &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{
	config RemoveConfig
	order &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;type&lt;/span&gt; RemoveConfig &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	headers []&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;RemoveHeaderFilter) &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;PreHandler&lt;/span&gt;(response http.ResponseWriter,request &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;http.Request)&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;bool&lt;/span&gt;{
	headers&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt;request.Header
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; name,_&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;range&lt;/span&gt; headers{
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; utils.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ContainerString&lt;/span&gt;(f.config.headers,name){
			headers.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Del&lt;/span&gt;(name)
		}
	}
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;RemoveHeaderFilter) &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;PostHandler&lt;/span&gt;(response http.ResponseWriter,request &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;http.Request){

}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;RemoveHeaderFilter)&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;getOrder&lt;/span&gt;()&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;{
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; f.order
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;RemoveHeaderFilter)&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;SetOrder&lt;/span&gt;(order &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;)Filter{
	f.order=order
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; f
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;RemoveHeaderFilterFactory)&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;New&lt;/span&gt;(config &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;string&lt;/span&gt;)Filter{
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;RemoveHeaderFilter{RemoveConfig{strings.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Split&lt;/span&gt;(config,&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)},&lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自定义全局过滤器&#34;&gt;自定义全局过滤器&lt;/h3&gt;
&lt;p&gt;有时候需要使用全局过滤器，针对的是所有的代理，全局代理器是&lt;strong&gt;单例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局过滤器以GlobalFilter结尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自定义过滤器 实现Filter接口&lt;/li&gt;
&lt;li&gt;注册全局过滤器&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;package&lt;/span&gt; filter

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;net/http/httputil&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;net/url&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;trpc-go/log&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;进行注册
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;init&lt;/span&gt;(){
	&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;RegisterGlobalFilter&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;proxy&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;ProxyFilter{order:&lt;span style=&#34;color:#099&#34;&gt;1024&lt;/span&gt;})
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;type&lt;/span&gt; ProxyFilter &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;struct&lt;/span&gt;{
	order &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;ProxyFilter) &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;PreHandler&lt;/span&gt;(response http.ResponseWriter,request &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;http.Request)&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;bool&lt;/span&gt;{
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt;(){
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; err&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;recover&lt;/span&gt;();err&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;nil&lt;/span&gt;{
			log.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;proxy filter has error&amp;#34;&lt;/span&gt;,err)
		}
	}()

	route&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt;request.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Context&lt;/span&gt;().&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Value&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; route&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;nil&lt;/span&gt;{
		fmt.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;uri is %s /n&amp;#34;&lt;/span&gt;,route)
	}&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;false&lt;/span&gt;
	}
	r &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; route.(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;string&lt;/span&gt;)
	uri,err&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt;url.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Parse&lt;/span&gt;(r)
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; err&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;nil&lt;/span&gt;{
		response.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;WriteHeader&lt;/span&gt;(http.StatusInternalServerError)
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;false&lt;/span&gt;
	}
	&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// not support http and https
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; uri.Scheme&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;||&lt;/span&gt;uri.Scheme&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt;{
		response.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;WriteHeader&lt;/span&gt;(http.StatusInternalServerError)
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;false&lt;/span&gt;
	}
	proxy &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:=&lt;/span&gt; httputil.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;NewSingleHostReverseProxy&lt;/span&gt;(uri)
	proxy.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ServeHTTP&lt;/span&gt;(response, request)
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;true&lt;/span&gt;
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;ProxyFilter) &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;PostHandler&lt;/span&gt;(response http.ResponseWriter,request &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;http.Request){
	fmt.&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;proxy complete&amp;#34;&lt;/span&gt;)
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;ProxyFilter) &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;getOrder&lt;/span&gt;()&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;{
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; p.order
}
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;func&lt;/span&gt; (p &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;*&lt;/span&gt;ProxyFilter) &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;SetOrder&lt;/span&gt;(order &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;int&lt;/span&gt;)Filter{
	p.order=order
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; p
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>一次OkHTTP3 网络排查</title>
      <link>https://bufferflies.github.io/post/%E7%BD%91%E7%BB%9C%E6%8E%92%E6%9F%A5-okhttp/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/%E7%BD%91%E7%BB%9C%E6%8E%92%E6%9F%A5-okhttp/</guid>
      
        <description>&lt;h1 id=&#34;记一次http-pipeline异常&#34;&gt;记一次http pipeline异常&lt;/h1&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;h3 id=&#34;服务依赖关系&#34;&gt;服务依赖关系&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;storage Client{
    storage OkHttp
    storage Netty
}
storage Server{
    storage Control 
    storage Tomcat
}

OkHttp-&amp;gt;Netty
Netty.&amp;gt;Tomcat
Tomcat -&amp;gt; Control
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;现象&#34;&gt;现象&lt;/h3&gt;
&lt;p&gt;每天偶现5次左右API调用返回400现象, 查询Server端日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;DEBUG&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;io.undertow.server.protocol.http.HttpReadListener sendBadRequestAndClose 284&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; - UT005014: Failed to parse request i in request-targetdRequestException: UT000165: Invalid character 
        at io.undertow.server.protocol.http.HttpRequestParser.handlePath&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HttpRequestParser.java:382&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; ~&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;undertow-core-1.4.26.Final.jar!/:1.4.26.Final&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
        at io.undertow.server.protocol.http.HttpRequestParser.handle&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HttpRequestParser.java:248&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; ~&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;undertow-core-1.4.26.Final.jar!/:1.4.26.Final&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
        at io.undertow.server.protocol.http.HttpReadListener.handleEventWithNoRunningRequest&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HttpReadListener.java:187&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;undertow-core-1.4.26.Final.jar!/:1.4.26.Final&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
        at io.undertow.server.protocol.http.HttpReadListener.handleEvent&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HttpReadListener.java:136&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;undertow-core-1.4.26.Final.jar!/:1.4.26.Final&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
        at io.undertow.server.protocol.http.HttpReadListener.handleEvent&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HttpReadListener.java:59&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;undertow-core-1.4.26.Final.jar!/:1.4.26.Final&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;排查流程&#34;&gt;排查流程&lt;/h2&gt;
&lt;p&gt;根据日志异常提示，报文中存在非法字符，两方面排查:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务端容器对HTTP协议解析有问题&lt;/li&gt;
&lt;li&gt;客户端发过来的请求存在非法字符&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先尝试换容器，使用tomcat替换undertow， 线上运行测试，发现问题依然存在，开始抓包&lt;/p&gt;
&lt;h3 id=&#34;抓包&#34;&gt;抓包&lt;/h3&gt;
&lt;p&gt;抓包结果如下图，出现6次400请求：
&lt;img src=&#34;https://bufferflies.github.io/%E7%BD%91%E7%BB%9C%E6%8E%92%E6%9F%A51.jpg&#34; alt=&#34;-w1040&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用tcp follow 查看一下报文，并没有发现异常情况：
&lt;img src=&#34;https://bufferflies.github.io/%E7%BD%91%E7%BB%9C%E6%8E%92%E6%9F%A52.jpg&#34; alt=&#34;-w981&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体查看一下报文：
&lt;img src=&#34;https://bufferflies.github.io/%E7%BD%91%E7%BB%9C%E6%8E%92%E6%9F%A53.jpg&#34; alt=&#34;-w1513&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看上面报文发现请求中携带content-length&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;继续看看body中的内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bufferflies.github.io/%E7%BD%91%E7%BB%9C%E6%8E%92%E6%9F%A55.jpg&#34; alt=&#34;-w803&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现content中的是下一个http 请求（请求B）， 请求B的一部分被放到上一个请求中，导致Server端无法解析请求B，报出非法字符，返回400 请求&lt;/p&gt;
&lt;p&gt;继续查看一下http follow情况，如下图， 请求B的一部分：
&lt;img src=&#34;https://bufferflies.github.io/%E7%BD%91%E7%BB%9C%E6%8E%92%E6%9F%A56.jpg&#34; alt=&#34;-w996&#34;&gt;&lt;/p&gt;
&lt;p&gt;验证之前的分析，这个请求不是Pipeline，正常的pipeline格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;echo&lt;/span&gt; -en &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;GET /index.html HTTP/1.1\r\nHost: example.com\r\n\r\nGET /other.html HTTP/1.1\r\nHost: example.com\r\n\r\n&amp;#34;&lt;/span&gt; | nc example.com &lt;span style=&#34;color:#099&#34;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;处理方法&#34;&gt;处理方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;升级OKHttp到4.0&lt;/li&gt;
&lt;li&gt;不使用OKHttp ，使用HttpComponent&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>zsh</title>
      <link>https://bufferflies.github.io/post/zsh-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/zsh-%E5%AE%89%E8%A3%85/</guid>
      
        <description>&lt;h2 id=&#34;安装oh-my-zsh&#34;&gt;安装oh-my-zsh&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sh -c &amp;quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装插件&#34;&gt;安装插件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进入oh-my-zsh插件库中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~/.oh-my-zsh/custom/plugins/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载插件（自动补全为例）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git://github.com/zsh-users/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其实插件名就是仓库名（zsh-autosuggestions）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插件生效
vim ~/.zshrc
找到plugin配置，添加如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plugins=(
    git
    zsh-autosuggestions
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生效.zshrc 文件
source ~/.zsh&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;安装fzf&#34;&gt;安装fzf&lt;/h2&gt;
&lt;p&gt;支持历史命令查看
&lt;a href=&#34;https://www.jianshu.com/p/74ff1e637b2c&#34;&gt;https://www.jianshu.com/p/74ff1e637b2c&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/b6af829ec2dc&#34;&gt;安装oh-my-zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/xfxf0520/article/details/84589446&#34;&gt;插件安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learnku.com/tensorflow/t/5790/ultimate-terminal-zshautojump&#34;&gt;autojumo&lt;/a&gt; 记录cd去过的路径 后面可以直接通过 j 文件夹进行跳转&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5d905a886fb9a04e3902d7a9&#34;&gt;fzf&lt;/a&gt; 记录历史命令，非常直观显示最近使用的命令&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>网络基础</title>
      <link>https://bufferflies.github.io/post/%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/%E7%BD%91%E7%BB%9C/</guid>
      
        <description>&lt;h1 id=&#34;网络基础协议&#34;&gt;网络基础协议&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://bufferflies.github.io/pachong.png&#34; alt=&#34;test&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>webflux源码设计1</title>
      <link>https://bufferflies.github.io/post/webflux%E8%A7%A3%E6%9E%901/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/webflux%E8%A7%A3%E6%9E%901/</guid>
      
        <description>&lt;h1 id=&#34;spring5-webflux-源码解析一&#34;&gt;Spring5 WebFlux 源码解析（一）&lt;/h1&gt;
&lt;h2 id=&#34;场景&#34;&gt;场景：&lt;/h2&gt;
&lt;p&gt;能够将&lt;strong&gt;请求&lt;/strong&gt;适配到&lt;strong&gt;指定方法&lt;/strong&gt;，&lt;strong&gt;调用&lt;/strong&gt;方法并&lt;strong&gt;返回&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;领域图&#34;&gt;领域图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;storage Request as W
storage HandlerMapping as M
storage HandlerAdapter as A
storage HandlerResultHandler as R
entity Result as E
control Handler as C

W -&amp;gt; M: trigger
M -&amp;gt; C: find 
E -&amp;gt; R: consume 
C -&amp;gt; A: adapt
A -&amp;gt; E: transfer

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对象解释
Request: 代表用户的请求
HandlerMapping： 处理器寻找器 根据请求参数，寻找到处理器
HandlerAdapter： 处理器适配器（入参和出参适配）
HandlerResultHandler：结果处理器
Result： 处理器处理后的结果
Handler： 处理器（需要用户编写）&lt;/p&gt;
&lt;h2 id=&#34;类图&#34;&gt;类图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;interface HandlerMapping{
    getHandler(ServerWebExchange ex):Object
}
interface HandlerAdapter{
    supports(Object object):boolean
    handler(ServerWebExchange ex, object):HandlerResult
}
interface HandlerResultHandler{
    supports(HandlerResult result): boolean 
    handle(ServerWebExchange ex, HandlerResult result): void
}
class HandlerResult{
    Object handler
    Object returnType
    Object returnValue
    Object returnBingContext
    Function&amp;lt;Throwable, HandleResult&amp;gt; exceptionException
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;时序图&#34;&gt;时序图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;actor User as U
boundary DispatcherHandler as D
control HandlerMapping as M
control HandlerAdapter as A
control HandlerResultHandler as R

U -&amp;gt; D: send Request
D -&amp;gt; M: find a handler that can resolve the request
M --&amp;gt; D: return Handler
D -&amp;gt; A: process the handler
A --&amp;gt; D: return HandlerResult
D -&amp;gt; R: process result 
R --&amp;gt; D: return response 
D --&amp;gt; U: render  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;核心链式调用&#34;&gt;核心链式调用：&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;(*) --&amp;gt; [request] &amp;quot;HandlerMapping&amp;quot;
--&amp;gt;[Handler] &amp;quot;HandlerAdapter&amp;quot;
--&amp;gt;[Adapt] &amp;quot;HandlerResult&amp;quot;
--&amp;gt;[Response] &amp;quot;Socket&amp;quot;
--&amp;gt;(*)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;附录&#34;&gt;附录&lt;/h3&gt;
&lt;h4 id=&#34;附录一&#34;&gt;附录一&lt;/h4&gt;
&lt;p&gt;spring 最核心代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;	public Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;Void&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; handle(ServerWebExchange exchange) {
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (this.handlerMappings &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; null) {
			&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; createNotFoundError();
		}
		&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 找到所有注册的Mappings
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; Flux.fromIterable(this.handlerMappings)
				&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 按序寻找可以处理该请求的Mapping
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;				.concatMap(mapping &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; mapping.getHandler(exchange))
				&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 只返回一个
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;				.next()
				&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;//无法进行处理 抛出404异常
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;				.switchIfEmpty(createNotFoundError())
				&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 寻找最适合的适配器并执行Handler 返回结果
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;				.flatMap(handler &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; invokeHandler(exchange, handler))
				&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 寻找结果处理器， 写回到Response中
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;				.flatMap(result &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; handleResult(exchange, result));
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;核心类单元测试构造&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;映射处理器&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// mock 一个HandlerMapping 接口 并使其继承Ordered 接口
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;HandlerMapping hm1 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; mock&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HandlerMapping&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; withSettings&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;extraInterfaces&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;Ordered&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 实现Ordered接口
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;given&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(((&lt;/span&gt;Ordered&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; hm1&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getOrder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;willReturn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 给定任何参数返回“1”
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;given&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;hm1&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getHandler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;any&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;willReturn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;Supplier&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;适配器&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;SupplierHandlerAdapter&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;implements&lt;/span&gt; HandlerAdapter &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;

   &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 支持所有的Supplier类型的处理器
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;       &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;supports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;Object handler&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; handler &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; Supplier&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 执行处理器 将其结果转换为HandlerResult
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;       &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;HandlerResult&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;ServerWebExchange exchange&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Object handler&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; HandlerResult&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;handler&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;Supplier&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; handler&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt; RETURN_TYPE&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;结果处理器&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;StringHandlerResultHandler&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;implements&lt;/span&gt; HandlerResultHandler &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;

       &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;supports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HandlerResult result&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
           Object value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getReturnValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; value &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;());&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

       &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;Void&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;handleResult&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;ServerWebExchange exchange&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; HandlerResult result&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 获取response中的值
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; bytes &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; result&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getReturnValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;StandardCharsets&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
           &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 将其转换为DataBuffer类型
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;           DataBuffer dataBuffer &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; DefaultDataBufferFactory&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;wrap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;bytes&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
           &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// 填充到response中
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;           &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; exchange&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getResponse&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;writeWith&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;Mono&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;dataBuffer&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
       &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>webflux源码设计2</title>
      <link>https://bufferflies.github.io/post/webflux%E8%A7%A3%E6%9E%902/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bufferflies.github.io/post/webflux%E8%A7%A3%E6%9E%902/</guid>
      
        <description>&lt;h2 id=&#34;核心类图&#34;&gt;核心类图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;class RouterFunction {
  RouteFunction routeFunction; 路由执行器
  List&amp;lt;HttpMessageReader&amp;lt;?&amp;gt;&amp;gt; messageReaders; request阅读器
  getHandlerInternal(ServerWebExchange ex): HandlerFunction 获取对应的执行器
}

class HandlerFunctionAdapter {
  supports(Object handler): boolean 只支持HandlerFunction 的函数
  handler(ServerWebExchange ex,Object handler): HandlerResult 执行方法并进行的转换
}

class ServerResponseResultHandler {
    List&amp;lt;HttpMessageWriter&amp;lt;?&amp;gt;&amp;gt; messageWriters: response 编写器
    List&amp;lt;ViewResolver&amp;gt; viewResolvers： 视图映射
    supports(HandlerResult result)：boolean 只处理返回类型为ServerResponse类型
    handleResult(ServerWebExchange exchange,HandlerResult result): void 将结果写入到response中
    
}

interface HandlerFunction{
   handle(ServerRequest request): T 最直接的操作 业户逻辑入口 一般lambda实现
}

interface RequestPredicate{
    test(ServerRequest request): boolean
}

interface RouteFunction {
  route(ServerRequest request): HandlerFunction 该路由是否能够满足该请求 核心
  and(RouteFunction other):  SameComposedRouterFunction 合并
  andOther(RouteFunction other): DifferentComposedRouterFunction 合并
  andRoute(RequestPredicate predicate, HandlerFunction&amp;lt;T&amp;gt; handlerFunction): RouterFunction 比较底层
  andNest(RequestPredicate predicate, RouterFunction&amp;lt;T&amp;gt;  routerFunction): RouterFunction 合并路由
  filter(HandlerFilterFunction&amp;lt;T, S&amp;gt; filterFunction): 带有过滤的路由
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解释：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RouteFunction 会将所有的RouteFunction进行聚合&lt;/li&gt;
&lt;li&gt;过滤其实是在mapping的时候执行的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;初始化过滤：&lt;/p&gt;
&lt;h2 id=&#34;时序图&#34;&gt;时序图&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plantuml&#34; data-lang=&#34;plantuml&#34;&gt;actor Processor as U
control RouteFunction as R
control Predicate as P 
control HandlerFunctionAdapter as A
control ServerResponseResultHandler as R

U -&amp;gt; R : getHandler
R -&amp;gt; P : test the request
P --&amp;gt;R : OK
R --&amp;gt;U : return HandlerFunction
U -&amp;gt; A : execute the handler
A --&amp;gt;U : return and wrap to HandlerResult
U -&amp;gt; R: test
R -&amp;gt;U : write value to response  
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
  </channel>
</rss>
